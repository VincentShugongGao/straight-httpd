<!DOCTYPE html>
<html style='width:100%;height:100%;'>
<head>
  <meta charset='UTF-8'>
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <title>Virtual Device</title>
  <link rel="stylesheet" href="share.css">
  <script type="application/javascript" src="js/base64js.min.js"></script>
  <style>
    .no-used
    {
        background-color: #007bff; /*primary*/
        background-color: #6c757d; /*secondary*/
        background-color: #28a745; /*success*/
        background-color: #dc3545; /*danger*/
        background-color: #ffc107; /*warning*/
        background-color: #17a2b8; /*info*/
        background-color: #f8f9fa; /*light*/
        background-color: #343a40; /*dark*/
    }
    
    #sendfw:not(:disabled):hover
    {
        cursor: pointer;
    }

    .file-item
    {
        padding: 10px; 
        border: 1px solid #8c8c8c;
    }
    .file-size
    {
        margin-top: 4px; 
        font-size: 12px;
    }
    .file-op
    {
        width: 30px; 
        color: red;
        font-size: 14px;
    }
    .file-op div
    {
        cursor: pointer;
    }
    .file-progress
    {
        height: 4px; 
        margin-top: 8px; 
        background-color: #ddd;
    }
    .file-progress > div
    {
        width: 0%; 
        height: 100%; 
        background-color: #17a2b8;
    }
    .truncate
    {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;        
    }
    .file-name
    {
        max-width: 240px;
    }
    #file-list
    {
        position: absolute;
        top: 60px;
        bottom: 8px;

        overflow-y: auto;
    }

  </style>
</head>
<body class='fill'>
  <div class='base columns center-item fill'>
    <div class='base columns center-item'>
      <div class='title margin-t24'>Virtual Device</div>
      <div class='sub-title margin-t2'>Powered by <!--#DEV_VENDOR--></div>
    </div>

    <div class='base columns center-item fill'>
      <div class="base row center-item margin-t24">
        <input id="file2send" style="max-width: 260px; height:30px; padding:4px;" type="file" multiple/>
        <button class="tab" id="sendfw" title="Send">Send</button>
      </div>
      <ul id="file-list" style="width: 330px; list-style: none; margin: 0; padding: 0;">
      </ul>
    </div>

    <div class='base row between-content'>
      <button class='tab' id='home'>Home</button>
      <button class='tab margin-l2' id='upload'>Upload</button>
      <button class='tab margin-l2' id='download'>Download</button>
      <button class='tab margin-l2' id='logout'>Logout</button>
    </div>
 </div>
 <script>
    document.getElementById('home').addEventListener('click', goHome);
    function goHome() { location.href = '/app/index.shtml'; }
   
    document.getElementById('upload').addEventListener('click', goUpload);
    function goUpload() { location.href = '/app/upload.shtml'; }
   
    document.getElementById('download').addEventListener('click', goDownload);
    function goDownload() { location.href = '/app/download.shtml'; }
	
    document.getElementById('logout').addEventListener('click', goLogout);
    function goLogout() { location.href = '/auth/logout.cgi'; }

    var max_timeout = 30; //seconds
    var fileIndex = 0;
    
    var filesUpload = document.getElementById("file2send");
    var sendJob = document.getElementById("sendfw");
    var fileList = document.getElementById("file-list");
    var allowPrompt = true;

    filesUpload.multiple = true;

    var running = null;
    var qUploads = [];
    function cbFinished()
    {
        running = null;

        if (qUploads.length > 0)
        {
            running = qUploads[0];
            running.start();
            qUploads.shift();
        }
    }

    function formatFileSize(size, compact)
    {
        var size1 = size;
        var size2 = '';
        if (size >= 1000000000) //GB
        {
            if (compact)
            {
                size2 = '' + (size / 1000000000).toFixed(2) + ' GB';
                return size2;
            }
            size2 += parseInt(size / 1000000000,10) + ',';
        }
        if (size >= 1000000) //MB
        {
            if (compact)
            {
                size2 = '' + (size / 1000000).toFixed(2) + ' MB';
                return size2;
            }
            size2 += parseInt((size%1000000000)/1000000,10) + ',';
        }
        if (size >= 1000) //KB
        {
            if (compact)
            {
                size2 = '' + (size / 1000).toFixed(2) + ' KB';
                return size2;
            }
            size2 += parseInt((size%1000000)/1000,10) + ',';
        }

        if (compact)
        {
            size2 = '' + size + ' B';
            return size2;
        }

        size2 += (size%1000);
        return size2 + 'Bytes';
    }

    function Base64Encode(str, encoding = 'utf-8') 
    {
        var bytes = new(TextEncoder || TextEncoderLite)(encoding).encode(str);
        return base64js.fromByteArray(bytes);
    }

    function Base64Decode(str, encoding = 'utf-8') 
    {
        var bytes = base64js.toByteArray(str);
        return new(TextDecoder || TextDecoderLite)(encoding).decode(bytes);
    }

    function traverseFiles(files, idFrom) 
    {
        if (files) 
        {
            for (var i = 0, l = files.length; i < l; i++)
            {
                var task = new uploadFile(files[i], cbFinished);
                qUploads.push(task);
            }

            if (!running && (qUploads.length > 0))
            {
                running = qUploads[0];
                running.start();

                qUploads.shift();
            }
        }
    }

    window.onload = function(e)
    {
        filesUpload.style.color='#F00';
        sendJob.disabled = true;
    }

    window.beforeunload = function()
    {
        if (allowPrompt){
            var confMessage  = "#######################################\n\n";
                confMessage += "==============  请等一等 ===============\n\n";
                confMessage += "   作业传输尚未结束，退出后，作业将自动终止\n\n";
                confMessage += "                确定退出吗？";
            
            return confMessage;
        }
        return '';
    }

    filesUpload.addEventListener('change', function() 
    {
        sendJob.disabled = !(this.files.length > 0);
        if (!sendJob.disabled)
            sendJob.title = 'Click to send';
    }, false);
            
    sendJob.addEventListener('click', function(e) 
    {
        e.preventDefault();
        e.stopPropagation();

        var session = new XMLHttpRequest();
        session.onload = function()
        {
            if (session.status == 200)
            {
                if (filesUpload.files.length > 0)
                {
                    allowPrompt = true;
                    traverseFiles(filesUpload.files);
                }
                return;
            }
            location.href='/';
        }
        session.onerror = function () 
        {
            console.log('session.onerror', session.status); 
            location.href='/';
        }
        session.open("GET", "/auth/session_check.cgi");
        session.send();
    }, false);

    function createElementFromHTML(htmlString) 
    {
        var div = document.createElement('div');
            div.innerHTML = htmlString.trim();
        return div.firstChild; 
    }

    function uploadFile(upFile, cbFinished) 
    {
        var _this = this;

        _this.file = upFile;
        _this.xhr = null;
        _this.abtTimer = null;
        _this.fileid = fileIndex ++;
        
        var li = document.createElement('li');
            li.setAttribute('id', 'file_' + _this.fileid);

        var htmlFileItem  = '<div class="base row center-item between-content file-item">';
            htmlFileItem += '  <div class="base columns stretch-item">';
            htmlFileItem += '    <div class="base row center-item">';
            htmlFileItem += '      <div class="base truncate file-name">' + _this.file.name + '</div>';
            htmlFileItem += '    </div>';
            htmlFileItem += '    <div class="base row center-item between-content file-size">';
            htmlFileItem += '      <div class="base">'+ formatFileSize(parseInt(_this.file.size, 10), 1) + '</div>';
            htmlFileItem += '      <div id="percent_' + _this.fileid + '" class="base">0&#37;</div>';
            htmlFileItem += '    </div>';
            htmlFileItem += '    <div class="base row center-item file-progress">';
            htmlFileItem += '      <div id="progress_' + _this.fileid + '" class="base row">';
            htmlFileItem += '      </div>';
            htmlFileItem += '    </div>';
            htmlFileItem += '  </div>';
            htmlFileItem += '  <div class="base columns right-item file-op">';
            htmlFileItem += '    <div id="stop_' + _this.fileid + '" class="base" style="font-size: 20px; display: none;">&#9632;</div>';
            htmlFileItem += '    <div id="delete_' + _this.fileid + '" class="base" style="display: none;">&#10006;</div>';
            htmlFileItem += '  </div>';
            htmlFileItem += '</div>';

        var div = createElementFromHTML(htmlFileItem);
        li.appendChild(div);
        fileList.appendChild(li);
        //fileList.prepend(li);

        var percent = document.getElementById('percent_' + _this.fileid);
        var progress = document.getElementById('progress_' + _this.fileid);

        _this.opStop = document.getElementById('stop_' + _this.fileid);
        _this.opDelete = document.getElementById('delete_' + _this.fileid);

        progress.style.backgroundColor = '#17a2b8';
        
        _this.xhr = new XMLHttpRequest();
        _this.xhr.upload.addEventListener('progress', function(e) 
        {
            if (_this.abtTimer != null)
                clearTimeout(_this.abtTimer);
            _this.abtTimer = setTimeout(function(){ _this.xhr.abort(); }, max_timeout*1000);

            if (e.lengthComputable) 
            {
                var rate = (e.loaded / e.total) * 100;
                progress.style.width = rate + '%';
                percent.innerHTML = '<span>' + parseInt(rate,10) + '&#37;</span>';
            }
        }, false);

        _this.opStop.addEventListener('click', function(e)
        {
            _this.xhr.abort();
        }, false);

        _this.opDelete.addEventListener('click', function(e)
        {
            var item = e.target.closest('li');
            item.remove();
        }, false);

        function onFailed(check_session)
        {
            if (_this.abtTimer != null)
                clearTimeout(_this.abtTimer);
            _this.abtTimer = null;

            percent.style.color = '#dc3545';
            progress.style.backgroundColor = '#dc3545';

            _this.opStop.style.display = 'none'; //hide stop
            _this.opDelete.style.display = ''; //show delete
            allowPrompt = false;

            if (typeof cbFinished == 'function')
                cbFinished(_this);

            if (!check_session)
                return;

            var session = new XMLHttpRequest();
            session.onload = function()
            {
                console.log('session.onload', session.status); 
                if (session.status != 200)
                    location.href='/';
            }
            session.onerror = function () 
            {
                console.log('session.onerror', session.status); 
                location.href='/';
            }
            session.open("GET", "/auth/session_check.cgi");
            session.send();
        }

        function onSucceeded()
        {
            if (_this.abtTimer != null)
                clearTimeout(_this.abtTimer);
            _this.abtTimer = null;

            progress.style.width = '100%';
            percent.innerHTML = '<span>100&#37;</span>';
            allowPrompt = false;

            percent.style.color = '#28a745';
            progress.style.backgroundColor = '#28a745';

            _this.opStop.style.display = 'none'; //hide stop
            _this.opDelete.style.display = ''; //show delete

            if (typeof cbFinished == 'function')
                cbFinished(_this);
        }

        _this.xhr.onreadystatechange = function() 
        { 
            console.log('onreadystatechange', _this.xhr.status); 
        }
        _this.xhr.onloadstart = function() 
        { 
            console.log('onloadstart', _this.xhr.status); 
        }
        _this.xhr.onload  = function() 
        { 
            console.log('onload', _this.xhr.status); 
            onSucceeded(); 
        }
        _this.xhr.onabort = function () 
        { 
            console.log('onabort', _this.xhr.status); 
            onFailed(); 
        }
        _this.xhr.onerror = function () 
        { 
            console.log('onerror', _this.xhr.status); 
            onFailed(1); 
        }
        _this.xhr.ontimeout = function() 
        { 
            console.log('ontimeout', _this.xhr.status); 
            onFailed();
        }
        _this.xhr.onloadend = function() 
        { 
            console.log('onloadend', _this.xhr.status); 
        }

        _this.start = function()
        {
            var _this= this;

            try
            {
                _this.opStop.style.display = ''; //show stop

                _this.xhr.open('post', '/api/upload.cgi', true);

                _this.xhr.setRequestHeader('Content-Type', 'multipart/form-data');
                _this.xhr.setRequestHeader('X-File-Name', Base64Encode(_this.file.name));
                _this.xhr.setRequestHeader('X-File-Size', _this.file.size);
                _this.xhr.setRequestHeader('X-File-Type', _this.file.type);
                //_this.xhr.setRequestHeader('Expect', '100-continue');

                _this.xhr.send(_this.file);
            }
            catch(e)
            {
                console.log(e);
            }

            _this.abtTimer = setTimeout(function(){ _this.xhr.abort(); }, max_timeout*1000);
        }
    }

 </script>
</body>
</html>
